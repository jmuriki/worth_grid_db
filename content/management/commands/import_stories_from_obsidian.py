import re
from pathlib import Path

from django.core.files import File
from django.core.management.base import BaseCommand

from content.models import (
    InterfaceCatalogSection,
    InterfaceCatalog,
    Interface,
    Role,
    Function,
    Story,
    StoryContext,
    StartPoint,
    StoryAcceptor,
)


RE_INTERFACE = re.compile(r'^##.*?–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å\s*"(?P<title>[^"]+)"', re.MULTILINE)
RE_USER_TYPE = re.compile(r'^##\s+üë§\s+(?P<role>.+)$', re.MULTILINE)
RE_FUNCTION = re.compile(r'^###\s+ùëì\s+(?P<job>.+)$', re.MULTILINE)
RE_STORY = re.compile(r'^####\s+‚úî\s+(?P<title>.+)$', re.MULTILINE)


class Command(BaseCommand):
    help = '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ –ë–î'

    def add_arguments(self, parser):
        parser.add_argument(
            'root_path',
            type=str,
            nargs='?',
            default="/Users/admin108/Library/Mobile Documents/com~apple~CloudDocs/Documents/PROGRAMMING/DEVMAN/ReviewGym/WorthGrid/–¶–ï–ù–ù–û–°–¢–ù–ê–Ø –°–ï–¢–ö–ê/2. –ò–ù–¢–ï–†–§–ï–òÃÜ–°–´",
            help='–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ò–ù–¢–ï–†–§–ï–ô–°–´',
        )

    def handle(self, *args, **options):
        root = Path(options['root_path'])
        md_files = list(root.rglob('*.md'))
        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(md_files)}')

        for md_path in md_files:

            with open(md_path, 'r', encoding='utf-8') as file:
                text = file.read().splitlines()

            interface_catalog_section_name = md_path.parent.name
            section, _ = InterfaceCatalogSection.objects.get_or_create(title=interface_catalog_section_name)
            
            interface = None
            role = None
            function = None
            story = None
            is_context = None
            is_start = None
            is_success = None
            is_refusal = None

            for line in text:
                if not interface:
                    interface_md_title = RE_INTERFACE.search(line)
                    if not interface_md_title:
                        continue
                    interface_subtitle = interface_md_title.group('title')
                    interface_title = md_path.stem
                    interface, _ = Interface.objects.get_or_create(title=interface_title, subtitle=interface_subtitle)
                    interface.sections.add(section)

                md_role = RE_USER_TYPE.search(line)
                if md_role:
                    role, _ = Role.objects.get_or_create(interface=interface, title=md_role.group('role'))

                md_function = RE_FUNCTION.search(line)
                if md_function:
                    function_job = md_function.group('job').strip()
                    function, _ = Function.objects.get_or_create(role=role, job=function_job)

                md_story = RE_STORY.search(line)
                if md_story:
                    story_title = md_story.group('title').strip()
                    story, _ = Story.objects.get_or_create(
                        title=story_title,
                        function=function,
                        got_wanted=True,
                    )

                if '–°–∏—Ç—É–∞—Ü–∏—è' in line:
                    is_context = True
                    continue
                if is_context and len(line) > 3:
                    StoryContext.objects.get_or_create(story=story, text=line.lstrip('>- [ ] '))
                elif is_context and len(line) < 3:
                    is_context = None

                if '–°—Ç–∞—Ä—Ç' in line:
                    is_start = True
                    continue
                if is_start and len(line) > 3:
                    StartPoint.objects.get_or_create(story=story, text=line.lstrip('>- [ ] '))
                elif is_start and len(line) < 3:
                    is_start = None

                if '–£—Å–ø–µ—Ö' in line:
                    is_success = True
                    story.got_wanted = True
                    story.save()
                    continue
                if is_success and len(line) > 3:
                    StoryAcceptor.objects.get_or_create(story=story, text=line.lstrip('>- [ ] '))
                elif is_success and len(line) < 3:
                    is_success = None

                if '–û—Ç–∫–∞–∑' in line:
                    is_refusal = True
                    story.got_wanted = False
                    story.save()
                    continue
                if is_refusal and len(line) > 3:
                    StoryAcceptor.objects.get_or_create(story=story, text=line.lstrip('>- [ ] '))
                elif is_refusal and len(line) < 3:
                    is_refusal = None

        self.stdout.write(self.style.SUCCESS('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω'))
